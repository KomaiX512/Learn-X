
> backend@0.1.0 dev
> ts-node-dev --respawn --transpile-only src/index.ts

[INFO] 00:10:04 ts-node-dev ver. 2.0.0 (using ts-node ver. 10.9.2, typescript ver. 5.9.2)

══════════════════════════════════════════════════════════════════════
🚀 LEARN-X BACKEND STARTING
══════════════════════════════════════════════════════════════════════
📍 Configuration:
   PORT: 8000
   FRONTEND_URLS: http://localhost:5173, http://localhost:5174
   REDIS_URL: redis://localhost:6379
   GEMINI_API_KEY: ✅ SET
   USE_VISUAL_VERSION: v3
   LOG_LEVEL: debug
══════════════════════════════════════════════════════════════════════

🔌 Connecting to Redis...
🎭 Initializing orchestrator...
🧹 Clearing stale job queues on startup...
2025-10-11T19:10:04.602Z [debug] NEW Plan worker created
2025-10-11T19:10:04.603Z [debug] NEW Gen worker created
2025-10-11T19:10:04.603Z [debug] NEW Parallel worker created
✅ Orchestrator initialized


══════════════════════════════════════════════════════════════════════
✅ SERVER READY
══════════════════════════════════════════════════════════════════════
🌐 Backend URL: http://localhost:8000
🔗 Health Check: http://localhost:8000/health
📡 WebSocket Ready: ws://localhost:8000
══════════════════════════════════════════════════════════════════════

2025-10-11T19:10:04.607Z [debug] Server listening on port 8000
✅ Redis connected
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
2025-10-11T19:11:04.619Z [debug] [monitor] Metrics updated:
2025-10-11T19:12:04.637Z [debug] [monitor] Metrics updated:
2025-10-11T19:12:29.867Z [debug] Received request on /api/query {"body":{"query":"DNA replication and transcription"}}
2025-10-11T19:12:29.867Z [debug] [api] Stored query for session 71af46c1-6158-436f-b5e7-7a731d14494f: "DNA replication and transcription"
2025-10-11T19:12:29.867Z [debug] [orchestrator] Enqueuing plan for session 71af46c1-6158-436f-b5e7-7a731d14494f
2025-10-11T19:12:29.869Z [debug] [orchestrator] Plan job added with id 14 for session 71af46c1-6158-436f-b5e7-7a731d14494f

──────────────────────────────────────────────────────────────────────
📋 PLAN WORKER STARTED
──────────────────────────────────────────────────────────────────────
Session: 71af46c1-6158-436f-b5e7-7a731d14494f
Query: DNA replication and transcription
Time: 2025-10-11T19:12:29.870Z
──────────────────────────────────────────────────────────────────────
2025-10-11T19:12:29.870Z [debug] [plan] START: session=71af46c1-6158-436f-b5e7-7a731d14494f query=DNA replication and transcription
2025-10-11T19:12:29.870Z [debug] [monitor] Started tracking request 71af46c1-6158-436f-b5e7-7a731d14494f
2025-10-11T19:12:29.870Z [debug] [cache] MISS - No cached plan for query: "DNA replication and transcription..."
2025-10-11T19:12:29.870Z [debug] [planner] Sending enhanced prompt to Gemini...
2025-10-11T19:12:29.879Z [debug] [timeout] Setting 120000ms timeout for planner/gemini
2025-10-11T19:12:48.804Z [debug] [planner] Received response from Gemini in 18934ms
2025-10-11T19:12:48.804Z [debug] [planner] JSON parsed successfully on first attempt
2025-10-11T19:12:48.804Z [debug] [monitor] Plan generation for 71af46c1-6158-436f-b5e7-7a731d14494f took 18934ms
2025-10-11T19:12:48.804Z [debug] [cache] Cached plan for query: "DNA replication and transcription..."
=== NEW STRUCTURED PLAN ===
Session: 71af46c1-6158-436f-b5e7-7a731d14494f
Query: DNA replication and transcription
Plan title: DNA's Duos: Replication & Transcription
Plan subtitle: You'll quickly learn how DNA copies itself and how its code is read to make cellular instructions.
Plan toc: [
  {
    minute: 1,
    title: 'The Intuition',
    summary: 'DNA: The Master Blueprint and its Copies'
  },
  {
    minute: 2,
    title: 'How It Works',
    summary: 'The Molecular Machines in Action'
  },
  {
    minute: 3,
    title: 'Real Applications',
    summary: 'From Cell Growth to Curing Diseases'
  }
]
Plan steps count: 3
Step 0: id=1, tag=intuition, desc="Imagine your DNA as a giant, invaluable cookbook locked safely in the cell's nucleus (the kitchen's vault). When a cell needs to divide – perhaps to heal a cut or help you grow taller – it needs a *complete, identical copy* of this entire cookbook for the new cell. This is **DNA Replication**: making a perfect duplicate of the whole book. But what if you just need *one specific recipe* (a gene) to make a protein (like insulin)? You wouldn't take the whole cookbook out of the vault! Instead, you'd quickly write down just that one recipe on a small notepad to take to the counter. This is **Transcription**: copying a single gene's instructions from DNA onto a messenger RNA (mRNA) molecule, ready to leave the nucleus."
Step 1: id=2, tag=mechanics, desc="Let's see the molecular magic. For **Replication**, the DNA's double helix 'unzips' like a zipper, separating its two strands. Then, an enzyme called **DNA Polymerase** swoops in, reading each exposed strand and adding new, complementary DNA nucleotides (A-T, G-C) to build two brand-new, identical DNA helices. It's like making two new full cookbooks, each with one original and one new page. For **Transcription**, only a *specific section* (a gene) of the DNA unzips briefly. An enzyme called **RNA Polymerase** then reads *one* of these exposed DNA strands and builds a single-stranded **mRNA** molecule, using RNA nucleotides (A-U, G-C). This mRNA molecule is a temporary 'recipe card' for a specific protein, ready to exit the nucleus."
Step 2: id=3, tag=applications, desc="These processes are fundamental to life! **DNA Replication** is how every single one of your billions of cells got its complete set of genetic instructions. It's critical for growth, tissue repair, and the inheritance of traits. Errors in replication can lead to mutations and diseases like cancer. **Transcription** is the first step in gene expression – how your genes are actually *read* and used to build proteins that perform all cell functions, from digesting food to building muscle. Understanding transcription allows scientists to develop gene therapies, where specific genes are turned on or off to treat diseases, or to create new drugs by targeting the machinery that controls how genes are read."
=== END NEW STRUCTURED PLAN ===
2025-10-11T19:12:48.805Z [debug] [plan] OK: session=71af46c1-6158-436f-b5e7-7a731d14494f plan received with 3 steps
2025-10-11T19:12:48.805Z [debug] [plan] Enqueuing PARALLEL generation of all 3 steps
2025-10-11T19:12:48.806Z [debug] [plan] END: session=71af46c1-6158-436f-b5e7-7a731d14494f

====================================================================================================
🔥 PARALLEL WORKER CALLED
====================================================================================================
Job ID: 14
Job name: parallel-generate
Job data keys: [ 'plan', 'sessionId', 'query' ]
====================================================================================================


──────────────────────────────────────────────────────────────────────
⚡ PARALLEL WORKER STARTED
──────────────────────────────────────────────────────────────────────
Session: 71af46c1-6158-436f-b5e7-7a731d14494f
Query: DNA replication and transcription
Steps to generate: 3
Time: 2025-10-11T19:12:48.807Z
──────────────────────────────────────────────────────────────────────
2025-10-11T19:12:48.807Z [info] [parallel] ⚡ STARTING parallel generation for 3 steps (session: 71af46c1-6158-436f-b5e7-7a731d14494f)
2025-10-11T19:12:48.807Z [info] [parallel] ⏸️  Staggering 5000ms before step 2 to avoid rate limits
2025-10-11T19:12:48.807Z [debug] [cache] MISS - No cached chunk for step 1
2025-10-11T19:12:48.808Z [info] [parallel] 🚀 Step 1: Using v3 TRUE GENERATION
2025-10-11T19:12:48.808Z [info] [codegenV3WithRetry] Attempt 1/2 for step 1
2025-10-11T19:12:48.808Z [info] [codegenV3] Generating step 1: Imagine your DNA as a giant, invaluable cookbook locked safely in the cell's nucleus (the kitchen's vault). When a cell needs to divide – perhaps to heal a cut or help you grow taller – it needs a *complete, identical copy* of this entire cookbook for the new cell. This is **DNA Replication**: making a perfect duplicate of the whole book. But what if you just need *one specific recipe* (a gene) to make a protein (like insulin)? You wouldn't take the whole cookbook out of the vault! Instead, you'd quickly write down just that one recipe on a small notepad to take to the counter. This is **Transcription**: copying a single gene's instructions from DNA onto a messenger RNA (mRNA) molecule, ready to leave the nucleus.
2025-10-11T19:12:48.808Z [info] [codegenV3] Topic: "DNA replication and transcription"
2025-10-11T19:12:48.808Z [debug] [codegenV3] Prompt length: 1546 chars
2025-10-11T19:12:53.808Z [info] [parallel] ⏸️  Staggering 5000ms before step 3 to avoid rate limits
2025-10-11T19:12:53.808Z [debug] [cache] MISS - No cached chunk for step 2
2025-10-11T19:12:53.808Z [info] [parallel] 🚀 Step 2: Using v3 TRUE GENERATION
2025-10-11T19:12:53.808Z [info] [codegenV3WithRetry] Attempt 1/2 for step 2
2025-10-11T19:12:53.808Z [info] [codegenV3] Generating step 2: Let's see the molecular magic. For **Replication**, the DNA's double helix 'unzips' like a zipper, separating its two strands. Then, an enzyme called **DNA Polymerase** swoops in, reading each exposed strand and adding new, complementary DNA nucleotides (A-T, G-C) to build two brand-new, identical DNA helices. It's like making two new full cookbooks, each with one original and one new page. For **Transcription**, only a *specific section* (a gene) of the DNA unzips briefly. An enzyme called **RNA Polymerase** then reads *one* of these exposed DNA strands and builds a single-stranded **mRNA** molecule, using RNA nucleotides (A-U, G-C). This mRNA molecule is a temporary 'recipe card' for a specific protein, ready to exit the nucleus.
2025-10-11T19:12:53.808Z [info] [codegenV3] Topic: "DNA replication and transcription"
2025-10-11T19:12:53.808Z [debug] [codegenV3] Prompt length: 1564 chars
2025-10-11T19:12:58.809Z [debug] [cache] MISS - No cached chunk for step 3
2025-10-11T19:12:58.809Z [info] [parallel] 🚀 Step 3: Using v3 TRUE GENERATION
2025-10-11T19:12:58.809Z [info] [codegenV3WithRetry] Attempt 1/2 for step 3
2025-10-11T19:12:58.809Z [info] [codegenV3] Generating step 3: These processes are fundamental to life! **DNA Replication** is how every single one of your billions of cells got its complete set of genetic instructions. It's critical for growth, tissue repair, and the inheritance of traits. Errors in replication can lead to mutations and diseases like cancer. **Transcription** is the first step in gene expression – how your genes are actually *read* and used to build proteins that perform all cell functions, from digesting food to building muscle. Understanding transcription allows scientists to develop gene therapies, where specific genes are turned on or off to treat diseases, or to create new drugs by targeting the machinery that controls how genes are read.
2025-10-11T19:12:58.809Z [info] [codegenV3] Topic: "DNA replication and transcription"
2025-10-11T19:12:58.809Z [debug] [codegenV3] Prompt length: 1531 chars
2025-10-11T19:13:04.640Z [debug] [monitor] Metrics updated:
2025-10-11T19:14:04.642Z [debug] [monitor] Metrics updated:
2025-10-11T19:14:16.675Z [debug] [codegenV3] Received 1537 chars from API
2025-10-11T19:14:16.675Z [error] [codegenV3] ❌ NO SVG STRUCTURE FOUND
2025-10-11T19:14:16.675Z [error] [codegenV3] Content received:
2025-10-11T19:14:16.675Z [error] <?xml version="1.0"?>
<svg width="800" height="600" viewBox="0 0 800 600">
  <defs>
    <style type="text/css">
      .label { font-family: Arial, sans-serif; font-size: 18px; fill: #333; }
      .dna-strand1 { stroke: #6A05AD; stroke-width: 5; fill: none; stroke-linecap: round; }
      .dna-strand2 { stroke: #8F00FF; stroke-width: 5; fill: none; stroke-linecap: round; }
      .new-dna { stroke: #00B050; stroke-width: 5; fill: none; stroke-linecap: round; }
      .mrna-strand { stroke: #FF6600; stroke-width: 5; fill: none; stroke-linecap: round; }
      .nucleus { fill: #F0F8FF; stroke: #ADD8E6; stroke-width: 3; }
      .rna-pol { fill: #FFD700; stroke: #DAA520; stroke-width: 2; }
    </style>
  </defs>

  <!-- Nucleus (Kitchen Vault) -->
  <circle cx="400" cy="300" r="250" class="nucleus"/>
  <text x="350" y="560" class="label">Nucleus (Kitchen Vault)</text>

  <!-- DNA REPLICATION -->
  <g id="replication-group" visibility="visible">
    <text x="360" y="130" class="label">DNA (Cookb
2025-10-11T19:14:16.675Z [error] [codegenV3] Generation failed: Generated content has no valid SVG structure
2025-10-11T19:14:16.675Z [warn] [codegenV3WithRetry] ⚠️ Null result, retrying...
2025-10-11T19:14:16.675Z [info] [codegenV3WithRetry] Waiting 3000ms before retry...
2025-10-11T19:14:18.237Z [error] [codegenV3] Empty text in response
2025-10-11T19:14:18.237Z [error] [codegenV3] Full response for debugging:
2025-10-11T19:14:18.237Z [error] [codegenV3] Generation failed: Empty response from API
2025-10-11T19:14:18.237Z [warn] [codegenV3WithRetry] ⚠️ Null result, retrying...
2025-10-11T19:14:18.237Z [info] [codegenV3WithRetry] Waiting 3000ms before retry...
2025-10-11T19:14:19.676Z [info] [codegenV3WithRetry] Attempt 2/2 for step 1
2025-10-11T19:14:19.676Z [info] [codegenV3] Generating step 1: Imagine your DNA as a giant, invaluable cookbook locked safely in the cell's nucleus (the kitchen's vault). When a cell needs to divide – perhaps to heal a cut or help you grow taller – it needs a *complete, identical copy* of this entire cookbook for the new cell. This is **DNA Replication**: making a perfect duplicate of the whole book. But what if you just need *one specific recipe* (a gene) to make a protein (like insulin)? You wouldn't take the whole cookbook out of the vault! Instead, you'd quickly write down just that one recipe on a small notepad to take to the counter. This is **Transcription**: copying a single gene's instructions from DNA onto a messenger RNA (mRNA) molecule, ready to leave the nucleus.
2025-10-11T19:14:19.676Z [info] [codegenV3] Topic: "DNA replication and transcription"
2025-10-11T19:14:19.676Z [debug] [codegenV3] Prompt length: 1546 chars
2025-10-11T19:14:21.239Z [info] [codegenV3WithRetry] Attempt 2/2 for step 2
2025-10-11T19:14:21.239Z [info] [codegenV3] Generating step 2: Let's see the molecular magic. For **Replication**, the DNA's double helix 'unzips' like a zipper, separating its two strands. Then, an enzyme called **DNA Polymerase** swoops in, reading each exposed strand and adding new, complementary DNA nucleotides (A-T, G-C) to build two brand-new, identical DNA helices. It's like making two new full cookbooks, each with one original and one new page. For **Transcription**, only a *specific section* (a gene) of the DNA unzips briefly. An enzyme called **RNA Polymerase** then reads *one* of these exposed DNA strands and builds a single-stranded **mRNA** molecule, using RNA nucleotides (A-U, G-C). This mRNA molecule is a temporary 'recipe card' for a specific protein, ready to exit the nucleus.
2025-10-11T19:14:21.239Z [info] [codegenV3] Topic: "DNA replication and transcription"
2025-10-11T19:14:21.239Z [debug] [codegenV3] Prompt length: 1564 chars
2025-10-11T19:14:28.813Z [error] [codegenV3] Generation failed: Generation timeout
2025-10-11T19:14:28.813Z [warn] [codegenV3WithRetry] ⚠️ Null result, retrying...
2025-10-11T19:14:28.813Z [info] [codegenV3WithRetry] Waiting 3000ms before retry...
2025-10-11T19:14:31.816Z [info] [codegenV3WithRetry] Attempt 2/2 for step 3
2025-10-11T19:14:31.816Z [info] [codegenV3] Generating step 3: These processes are fundamental to life! **DNA Replication** is how every single one of your billions of cells got its complete set of genetic instructions. It's critical for growth, tissue repair, and the inheritance of traits. Errors in replication can lead to mutations and diseases like cancer. **Transcription** is the first step in gene expression – how your genes are actually *read* and used to build proteins that perform all cell functions, from digesting food to building muscle. Understanding transcription allows scientists to develop gene therapies, where specific genes are turned on or off to treat diseases, or to create new drugs by targeting the machinery that controls how genes are read.
2025-10-11T19:14:31.816Z [info] [codegenV3] Topic: "DNA replication and transcription"
2025-10-11T19:14:31.816Z [debug] [codegenV3] Prompt length: 1531 chars
2025-10-11T19:15:04.643Z [debug] [monitor] Metrics updated:
2025-10-11T19:15:40.421Z [debug] [codegenV3] Received 8148 chars from API
2025-10-11T19:15:40.421Z [info] [codegenV3] ✅ Generated SVG in 80.75s (8148 chars)
2025-10-11T19:15:40.421Z [info] [codegenV3] 🎬 ANIMATIONS: 34 total (<animate>: 30, <animateMotion>: 4, <animateTransform>: 0)
2025-10-11T19:15:40.421Z [info] [codegenV3] 📊 CONTENT: labels=13, shapes=14
2025-10-11T19:15:40.421Z [info] [codegenV3] ✅ ANIMATIONS PRESENT - Quality check passed
2025-10-11T19:15:40.421Z [info] [codegenV3] Reference saved to: /tmp/debug-step1-WITH-ANIMATIONS.svg
2025-10-11T19:15:40.421Z [info] [codegenV3WithRetry] ✅ SUCCESS (1 actions)
2025-10-11T19:15:40.421Z [debug] compilerRouter: routing to js
2025-10-11T19:15:40.422Z [debug] [debugger] START: Received chunk for stepId=1
2025-10-11T19:15:40.422Z [debug] [debugger] Chunk type: actions
2025-10-11T19:15:40.422Z [debug] [debugger] Has actions: true
2025-10-11T19:15:40.422Z [debug] [debugger] Actions count: 1
2025-10-11T19:15:40.422Z [debug] [debugger] Chunk is valid with 1 actions, allowing all for rich visualizations
2025-10-11T19:15:40.422Z [debug] [cache] Cached chunk for query step 1
2025-10-11T19:15:40.422Z [debug] [monitor] Step 1 generation for 71af46c1-6158-436f-b5e7-7a731d14494f took 171615ms
2025-10-11T19:15:40.422Z [info] [parallel] ✅ Step 1 COMPLETE in 171615ms with 1 actions

══════════════════════════════════════════════════════════════════════
🚀 ABOUT TO EMIT STEP
══════════════════════════════════════════════════════════════════════
SessionId: 71af46c1-6158-436f-b5e7-7a731d14494f
StepId: 1
Actions: 1
Room sockets: 0
══════════════════════════════════════════════════════════════════════
✅ EMITTED SUCCESSFULLY

2025-10-11T19:15:40.423Z [info] [parallel] 🚀 IMMEDIATELY EMITTED step 1 to frontend (0 sockets)
2025-10-11T19:15:44.830Z [debug] [codegenV3] Received 168 chars from API
2025-10-11T19:15:44.830Z [error] [codegenV3] ❌ NO SVG STRUCTURE FOUND
2025-10-11T19:15:44.830Z [error] [codegenV3] Content received:
2025-10-11T19:15:44.830Z [error] <?xml version="1.0"?>
<svg width="800" height="600" viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .ds{stroke:#007bff;stroke-width
2025-10-11T19:15:44.830Z [error] [codegenV3] Generation failed: Generated content has no valid SVG structure
2025-10-11T19:15:44.831Z [error] [codegenV3WithRetry] ❌ All attempts failed
2025-10-11T19:15:44.831Z [error] [parallel] ❌ Step 2 codegen returned null after all retries
2025-10-11T19:15:44.831Z [debug] [monitor] Step 2 generation for 71af46c1-6158-436f-b5e7-7a731d14494f took 171023ms
2025-10-11T19:15:44.831Z [error] [parallel] Step 2 failed: Error: Step 2 generation failed after all retry attempts
2025-10-11T19:15:57.618Z [debug] [codegenV3] Received 5129 chars from API
2025-10-11T19:15:57.618Z [error] [codegenV3] ❌ NO SVG STRUCTURE FOUND
2025-10-11T19:15:57.618Z [error] [codegenV3] Content received:
2025-10-11T19:15:57.618Z [error] <?xml version="1.0"?>
<svg width="800" height="600" viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <rect width="100%" height="100%" fill="#F0F8FF"/> <!-- Light background for visual clarity -->
  <text x="400" y="40" font-size="28" fill="#222" font-weight="bold" text-anchor="middle">DNA Replication &amp; Transcription: Fundamental Processes</text>

  <!-- DNA Replication Section -->
  <g id="replication_scene">
    <text x="50" y="90" font-size="22" fill="#000" font-weight="bold">1. DNA Replication</text>

    <!-- Initial DNA Double Helix -->
    <line id="dna_strand_1" x1="100" y1="150" x2="350" y2="150" stroke="#0055AA" stroke-width="8" stroke-linecap="round"/>
    <line id="dna_strand_2" x1="100" y1="170" x2="350" y2="170" stroke="#AA5500" stroke-width="8" stroke-linecap="round"/>
    <text x="175" y="140" font-size="14" fill="#0055AA" text-anchor="middle">DNA Double Helix</text>

    <!-- Unzipping Animation -->
    <animate 
2025-10-11T19:15:57.618Z [error] [codegenV3] Generation failed: Generated content has no valid SVG structure
2025-10-11T19:15:57.618Z [error] [codegenV3WithRetry] ❌ All attempts failed
2025-10-11T19:15:57.619Z [error] [parallel] ❌ Step 3 codegen returned null after all retries
2025-10-11T19:15:57.619Z [debug] [monitor] Step 3 generation for 71af46c1-6158-436f-b5e7-7a731d14494f took 178810ms
2025-10-11T19:15:57.619Z [error] [parallel] Step 3 failed: Error: Step 3 generation failed after all retry attempts
2025-10-11T19:15:57.619Z [debug] [parallel] Parallel generation complete: 1/3 successful in 188812ms
2025-10-11T19:15:57.619Z [debug] [monitor] Completed request 71af46c1-6158-436f-b5e7-7a731d14494f in 207749ms (success: true)
2025-10-11T19:15:57.619Z [debug] [parallel] Job complete for session 71af46c1-6158-436f-b5e7-7a731d14494f
2025-10-11T19:16:04.654Z [debug] [monitor] Metrics updated:
2025-10-11T19:16:07.846Z [debug] Received request on /api/query {"body":{"query":"DNA replication"}}
2025-10-11T19:16:07.846Z [debug] [api] Stored query for session 3407770b-8f4f-49c3-b078-ca937ece21f2: "DNA replication"
2025-10-11T19:16:07.846Z [debug] [orchestrator] Enqueuing plan for session 3407770b-8f4f-49c3-b078-ca937ece21f2
2025-10-11T19:16:07.847Z [debug] [orchestrator] Plan job added with id 15 for session 3407770b-8f4f-49c3-b078-ca937ece21f2

──────────────────────────────────────────────────────────────────────
📋 PLAN WORKER STARTED
──────────────────────────────────────────────────────────────────────
Session: 3407770b-8f4f-49c3-b078-ca937ece21f2
Query: DNA replication
Time: 2025-10-11T19:16:07.848Z
──────────────────────────────────────────────────────────────────────
2025-10-11T19:16:07.848Z [debug] [plan] START: session=3407770b-8f4f-49c3-b078-ca937ece21f2 query=DNA replication
2025-10-11T19:16:07.848Z [debug] [monitor] Started tracking request 3407770b-8f4f-49c3-b078-ca937ece21f2
2025-10-11T19:16:07.848Z [debug] [cache] MISS - No cached plan for query: "DNA replication..."
2025-10-11T19:16:07.848Z [debug] [planner] Sending enhanced prompt to Gemini...
2025-10-11T19:16:07.849Z [debug] [timeout] Setting 120000ms timeout for planner/gemini
2025-10-11T19:16:07.860Z [debug] [socket] New connection: oabr5QL5gJOjwL5ZAAAB
2025-10-11T19:16:07.862Z [debug] [socket] Socket oabr5QL5gJOjwL5ZAAAB joined session 3407770b-8f4f-49c3-b078-ca937ece21f2
2025-10-11T19:16:07.862Z [debug] [socket] Socket oabr5QL5gJOjwL5ZAAAB is now in rooms: oabr5QL5gJOjwL5ZAAAB, 3407770b-8f4f-49c3-b078-ca937ece21f2
2025-10-11T19:16:22.122Z [debug] [planner] Received response from Gemini in 14274ms
2025-10-11T19:16:22.122Z [debug] [planner] JSON parsed successfully on first attempt
2025-10-11T19:16:22.122Z [debug] [monitor] Plan generation for 3407770b-8f4f-49c3-b078-ca937ece21f2 took 14274ms
2025-10-11T19:16:22.122Z [debug] [cache] Cached plan for query: "DNA replication..."
=== NEW STRUCTURED PLAN ===
Session: 3407770b-8f4f-49c3-b078-ca937ece21f2
Query: DNA replication
Plan title: DNA Replication: The Blueprint Duplicator
Plan subtitle: Discover how cells flawlessly copy their entire genetic instruction manual before dividing.
Plan toc: [
  {
    minute: 1,
    title: 'The Intuition: Why & How Cells Copy DNA',
    summary: "Why perfect DNA copies are vital for life and the simple 'unzipping' idea."
  },
  {
    minute: 2,
    title: 'How It Works: The Molecular Machines',
    summary: 'Key enzymes and the precise base-pairing mechanism that builds new DNA strands.'
  },
  {
    minute: 3,
    title: 'Real Applications: From Forensics to Medicine',
    summary: 'Where understanding DNA replication impacts our world, from crime scenes to cancer treatment.'
  }
]
Plan steps count: 3
Step 0: id=1, tag=intuition, desc="Imagine you have the most important blueprint in the world for an incredibly complex machine: *you*. Every time a cell divides to grow, heal a wound, or replace old cells, it needs to make an *exact* copy of this DNA blueprint so each new cell gets a full, perfect set of instructions. But how does it do this without mistakes? The intuition is simple: think of DNA as a double-sided zipper. Before division, the 'zipper' *unzips* down the middle. Now, each single strand acts as a template, guiding the attachment of new, complementary 'zipper teeth' to rebuild two complete, identical zippers. This 'semiconservative' process means each new DNA molecule has one original strand and one newly synthesized strand."
Step 1: id=2, tag=mechanics, desc="Let's get specific! The process begins with an enzyme called **Helicase**, which acts like a molecular 'unzipper,' unwinding the DNA double helix and separating the two parent strands. Next, the star player, **DNA Polymerase**, steps in. It moves along each exposed template strand, reading the nucleotide bases (A, T, C, G) and adding *complementary* new nucleotides: Adenine (A) always pairs with Thymine (T), and Guanine (G) always pairs with Cytosine (C). It's a precise matching game! DNA Polymerase also has a 'proofreading' function, correcting most errors as it goes, ensuring remarkable accuracy. The result is two identical DNA double helices, each a perfect replica of the original molecule."
Step 2: id=3, tag=applications, desc="Understanding DNA replication is profoundly important! If errors (mutations) occur during this copying process and aren't corrected, they can lead to genetic diseases or even cancer. However, we also harness this knowledge for incredible applications: **PCR (Polymerase Chain Reaction)** is a revolutionary lab technique that mimics DNA replication to make millions of copies of specific DNA segments. This is vital for **forensics** (identifying criminals from tiny DNA samples), **diagnosing infections** (like COVID-19 tests), and **genetic testing**. Furthermore, many **cancer therapies** work by targeting and disrupting DNA replication in rapidly dividing cancer cells, while researchers develop **antiviral drugs** by finding ways to block viruses from replicating their genetic material inside our cells."
=== END NEW STRUCTURED PLAN ===
2025-10-11T19:16:22.123Z [debug] [plan] OK: session=3407770b-8f4f-49c3-b078-ca937ece21f2 plan received with 3 steps
2025-10-11T19:16:22.123Z [debug] [plan] Enqueuing PARALLEL generation of all 3 steps
2025-10-11T19:16:22.124Z [debug] [plan] END: session=3407770b-8f4f-49c3-b078-ca937ece21f2

====================================================================================================
🔥 PARALLEL WORKER CALLED
====================================================================================================
Job ID: 15
Job name: parallel-generate
Job data keys: [ 'plan', 'sessionId', 'query' ]
====================================================================================================


──────────────────────────────────────────────────────────────────────
⚡ PARALLEL WORKER STARTED
──────────────────────────────────────────────────────────────────────
Session: 3407770b-8f4f-49c3-b078-ca937ece21f2
Query: DNA replication
Steps to generate: 3
Time: 2025-10-11T19:16:22.124Z
──────────────────────────────────────────────────────────────────────
2025-10-11T19:16:22.124Z [info] [parallel] ⚡ STARTING parallel generation for 3 steps (session: 3407770b-8f4f-49c3-b078-ca937ece21f2)
2025-10-11T19:16:22.124Z [info] [parallel] ⏸️  Staggering 5000ms before step 2 to avoid rate limits
2025-10-11T19:16:22.124Z [debug] [cache] MISS - No cached chunk for step 1
2025-10-11T19:16:22.124Z [info] [parallel] 🚀 Step 1: Using v3 TRUE GENERATION
2025-10-11T19:16:22.125Z [info] [codegenV3WithRetry] Attempt 1/2 for step 1
2025-10-11T19:16:22.125Z [info] [codegenV3] Generating step 1: Imagine you have the most important blueprint in the world for an incredibly complex machine: *you*. Every time a cell divides to grow, heal a wound, or replace old cells, it needs to make an *exact* copy of this DNA blueprint so each new cell gets a full, perfect set of instructions. But how does it do this without mistakes? The intuition is simple: think of DNA as a double-sided zipper. Before division, the 'zipper' *unzips* down the middle. Now, each single strand acts as a template, guiding the attachment of new, complementary 'zipper teeth' to rebuild two complete, identical zippers. This 'semiconservative' process means each new DNA molecule has one original strand and one newly synthesized strand.
2025-10-11T19:16:22.125Z [info] [codegenV3] Topic: "DNA replication"
2025-10-11T19:16:22.125Z [debug] [codegenV3] Prompt length: 1518 chars
2025-10-11T19:16:27.127Z [info] [parallel] ⏸️  Staggering 5000ms before step 3 to avoid rate limits
2025-10-11T19:16:27.127Z [debug] [cache] MISS - No cached chunk for step 2
2025-10-11T19:16:27.128Z [info] [parallel] 🚀 Step 2: Using v3 TRUE GENERATION
2025-10-11T19:16:27.128Z [info] [codegenV3WithRetry] Attempt 1/2 for step 2
2025-10-11T19:16:27.128Z [info] [codegenV3] Generating step 2: Let's get specific! The process begins with an enzyme called **Helicase**, which acts like a molecular 'unzipper,' unwinding the DNA double helix and separating the two parent strands. Next, the star player, **DNA Polymerase**, steps in. It moves along each exposed template strand, reading the nucleotide bases (A, T, C, G) and adding *complementary* new nucleotides: Adenine (A) always pairs with Thymine (T), and Guanine (G) always pairs with Cytosine (C). It's a precise matching game! DNA Polymerase also has a 'proofreading' function, correcting most errors as it goes, ensuring remarkable accuracy. The result is two identical DNA double helices, each a perfect replica of the original molecule.
2025-10-11T19:16:27.128Z [info] [codegenV3] Topic: "DNA replication"
2025-10-11T19:16:27.128Z [debug] [codegenV3] Prompt length: 1507 chars
2025-10-11T19:16:32.130Z [debug] [cache] MISS - No cached chunk for step 3
2025-10-11T19:16:32.131Z [info] [parallel] 🚀 Step 3: Using v3 TRUE GENERATION
2025-10-11T19:16:32.131Z [info] [codegenV3WithRetry] Attempt 1/2 for step 3
2025-10-11T19:16:32.131Z [info] [codegenV3] Generating step 3: Understanding DNA replication is profoundly important! If errors (mutations) occur during this copying process and aren't corrected, they can lead to genetic diseases or even cancer. However, we also harness this knowledge for incredible applications: **PCR (Polymerase Chain Reaction)** is a revolutionary lab technique that mimics DNA replication to make millions of copies of specific DNA segments. This is vital for **forensics** (identifying criminals from tiny DNA samples), **diagnosing infections** (like COVID-19 tests), and **genetic testing**. Furthermore, many **cancer therapies** work by targeting and disrupting DNA replication in rapidly dividing cancer cells, while researchers develop **antiviral drugs** by finding ways to block viruses from replicating their genetic material inside our cells.
2025-10-11T19:16:32.131Z [info] [codegenV3] Topic: "DNA replication"
2025-10-11T19:16:32.131Z [debug] [codegenV3] Prompt length: 1618 chars
2025-10-11T19:17:04.654Z [debug] [monitor] Metrics updated:
2025-10-11T19:17:48.889Z [error] [codegenV3] Empty text in response
2025-10-11T19:17:48.890Z [error] [codegenV3] Full response for debugging:
2025-10-11T19:17:48.890Z [error] [codegenV3] Generation failed: Empty response from API
2025-10-11T19:17:48.890Z [warn] [codegenV3WithRetry] ⚠️ Null result, retrying...
2025-10-11T19:17:48.890Z [info] [codegenV3WithRetry] Waiting 3000ms before retry...
2025-10-11T19:17:51.557Z [error] [codegenV3] Empty text in response
2025-10-11T19:17:51.557Z [error] [codegenV3] Full response for debugging:
2025-10-11T19:17:51.557Z [error] [codegenV3] Generation failed: Empty response from API
2025-10-11T19:17:51.557Z [warn] [codegenV3WithRetry] ⚠️ Null result, retrying...
2025-10-11T19:17:51.557Z [info] [codegenV3WithRetry] Waiting 3000ms before retry...
2025-10-11T19:17:51.890Z [info] [codegenV3WithRetry] Attempt 2/2 for step 1
2025-10-11T19:17:51.890Z [info] [codegenV3] Generating step 1: Imagine you have the most important blueprint in the world for an incredibly complex machine: *you*. Every time a cell divides to grow, heal a wound, or replace old cells, it needs to make an *exact* copy of this DNA blueprint so each new cell gets a full, perfect set of instructions. But how does it do this without mistakes? The intuition is simple: think of DNA as a double-sided zipper. Before division, the 'zipper' *unzips* down the middle. Now, each single strand acts as a template, guiding the attachment of new, complementary 'zipper teeth' to rebuild two complete, identical zippers. This 'semiconservative' process means each new DNA molecule has one original strand and one newly synthesized strand.
2025-10-11T19:17:51.890Z [info] [codegenV3] Topic: "DNA replication"
2025-10-11T19:17:51.890Z [debug] [codegenV3] Prompt length: 1518 chars
2025-10-11T19:17:54.559Z [info] [codegenV3WithRetry] Attempt 2/2 for step 2
2025-10-11T19:17:54.559Z [info] [codegenV3] Generating step 2: Let's get specific! The process begins with an enzyme called **Helicase**, which acts like a molecular 'unzipper,' unwinding the DNA double helix and separating the two parent strands. Next, the star player, **DNA Polymerase**, steps in. It moves along each exposed template strand, reading the nucleotide bases (A, T, C, G) and adding *complementary* new nucleotides: Adenine (A) always pairs with Thymine (T), and Guanine (G) always pairs with Cytosine (C). It's a precise matching game! DNA Polymerase also has a 'proofreading' function, correcting most errors as it goes, ensuring remarkable accuracy. The result is two identical DNA double helices, each a perfect replica of the original molecule.
2025-10-11T19:17:54.559Z [info] [codegenV3] Topic: "DNA replication"
2025-10-11T19:17:54.559Z [debug] [codegenV3] Prompt length: 1507 chars
2025-10-11T19:18:02.131Z [error] [codegenV3] Generation failed: Generation timeout
2025-10-11T19:18:02.131Z [warn] [codegenV3WithRetry] ⚠️ Null result, retrying...
2025-10-11T19:18:02.131Z [info] [codegenV3WithRetry] Waiting 3000ms before retry...
2025-10-11T19:18:04.658Z [debug] [monitor] Metrics updated:
2025-10-11T19:18:05.133Z [info] [codegenV3WithRetry] Attempt 2/2 for step 3
2025-10-11T19:18:05.133Z [info] [codegenV3] Generating step 3: Understanding DNA replication is profoundly important! If errors (mutations) occur during this copying process and aren't corrected, they can lead to genetic diseases or even cancer. However, we also harness this knowledge for incredible applications: **PCR (Polymerase Chain Reaction)** is a revolutionary lab technique that mimics DNA replication to make millions of copies of specific DNA segments. This is vital for **forensics** (identifying criminals from tiny DNA samples), **diagnosing infections** (like COVID-19 tests), and **genetic testing**. Furthermore, many **cancer therapies** work by targeting and disrupting DNA replication in rapidly dividing cancer cells, while researchers develop **antiviral drugs** by finding ways to block viruses from replicating their genetic material inside our cells.
2025-10-11T19:18:05.133Z [info] [codegenV3] Topic: "DNA replication"
2025-10-11T19:18:05.133Z [debug] [codegenV3] Prompt length: 1618 chars
2025-10-11T19:19:00.621Z [debug] [codegenV3] Received 7244 chars from API
2025-10-11T19:19:00.621Z [info] [codegenV3] ✅ Generated SVG in 68.73s (7244 chars)
2025-10-11T19:19:00.621Z [info] [codegenV3] 🎬 ANIMATIONS: 23 total (<animate>: 17, <animateMotion>: 0, <animateTransform>: 6)
2025-10-11T19:19:00.621Z [info] [codegenV3] 📊 CONTENT: labels=9, shapes=6
2025-10-11T19:19:00.621Z [info] [codegenV3] ✅ ANIMATIONS PRESENT - Quality check passed
2025-10-11T19:19:00.621Z [info] [codegenV3] Reference saved to: /tmp/debug-step1-WITH-ANIMATIONS.svg
2025-10-11T19:19:00.621Z [info] [codegenV3WithRetry] ✅ SUCCESS (1 actions)
2025-10-11T19:19:00.621Z [debug] compilerRouter: routing to js
2025-10-11T19:19:00.621Z [debug] [debugger] START: Received chunk for stepId=1
2025-10-11T19:19:00.621Z [debug] [debugger] Chunk type: actions
2025-10-11T19:19:00.621Z [debug] [debugger] Has actions: true
2025-10-11T19:19:00.622Z [debug] [debugger] Actions count: 1
2025-10-11T19:19:00.622Z [debug] [debugger] Chunk is valid with 1 actions, allowing all for rich visualizations
2025-10-11T19:19:00.622Z [debug] [cache] Cached chunk for query step 1
2025-10-11T19:19:00.622Z [debug] [monitor] Step 1 generation for 3407770b-8f4f-49c3-b078-ca937ece21f2 took 158498ms
2025-10-11T19:19:00.622Z [info] [parallel] ✅ Step 1 COMPLETE in 158498ms with 1 actions

══════════════════════════════════════════════════════════════════════
🚀 ABOUT TO EMIT STEP
══════════════════════════════════════════════════════════════════════
SessionId: 3407770b-8f4f-49c3-b078-ca937ece21f2
StepId: 1
Actions: 1
Room sockets: 1
══════════════════════════════════════════════════════════════════════
✅ EMITTED SUCCESSFULLY

2025-10-11T19:19:00.622Z [info] [parallel] 🚀 IMMEDIATELY EMITTED step 1 to frontend (1 sockets)
2025-10-11T19:19:04.662Z [debug] [monitor] Metrics updated:
2025-10-11T19:19:07.879Z [debug] [socket] Socket oabr5QL5gJOjwL5ZAAAB disconnected: client namespace disconnect
2025-10-11T19:19:24.561Z [error] [codegenV3] Generation failed: Generation timeout
2025-10-11T19:19:24.561Z [error] [codegenV3WithRetry] ❌ All attempts failed
2025-10-11T19:19:24.561Z [error] [parallel] ❌ Step 2 codegen returned null after all retries
2025-10-11T19:19:24.561Z [debug] [monitor] Step 2 generation for 3407770b-8f4f-49c3-b078-ca937ece21f2 took 177434ms
2025-10-11T19:19:24.561Z [error] [parallel] Step 2 failed: Error: Step 2 generation failed after all retry attempts
2025-10-11T19:19:28.256Z [error] [codegenV3] Empty text in response
2025-10-11T19:19:28.256Z [error] [codegenV3] Full response for debugging:
2025-10-11T19:19:28.256Z [error] [codegenV3] Generation failed: Empty response from API
2025-10-11T19:19:28.256Z [error] [codegenV3WithRetry] ❌ All attempts failed
2025-10-11T19:19:28.256Z [error] [parallel] ❌ Step 3 codegen returned null after all retries
2025-10-11T19:19:28.256Z [debug] [monitor] Step 3 generation for 3407770b-8f4f-49c3-b078-ca937ece21f2 took 176126ms
2025-10-11T19:19:28.256Z [error] [parallel] Step 3 failed: Error: Step 3 generation failed after all retry attempts
2025-10-11T19:19:28.256Z [debug] [parallel] Parallel generation complete: 1/3 successful in 186132ms
2025-10-11T19:19:28.256Z [debug] [monitor] Completed request 3407770b-8f4f-49c3-b078-ca937ece21f2 in 200408ms (success: true)
2025-10-11T19:19:28.257Z [debug] [parallel] Job complete for session 3407770b-8f4f-49c3-b078-ca937ece21f2
2025-10-11T19:20:04.666Z [debug] [monitor] Metrics updated:
2025-10-11T19:21:04.670Z [debug] [monitor] Metrics updated:
2025-10-11T19:22:04.672Z [debug] [monitor] Metrics updated:
2025-10-11T19:23:04.673Z [debug] [monitor] Metrics updated:
2025-10-11T19:24:04.675Z [debug] [monitor] Metrics updated:
2025-10-11T19:25:04.676Z [debug] [monitor] Metrics updated:
[INFO] 00:25:15 Restarting: /home/komail/LEAF/Learn-X/app/backend/src/agents/codegenV3.ts has been modified
2025-10-11T19:25:15.573Z [debug] Shutting down server...
2025-10-11T19:25:15.574Z [debug] Server shut down.

══════════════════════════════════════════════════════════════════════
🚀 LEARN-X BACKEND STARTING
══════════════════════════════════════════════════════════════════════
📍 Configuration:
   PORT: 8000
   FRONTEND_URLS: http://localhost:5173, http://localhost:5174
   REDIS_URL: redis://localhost:6379
   GEMINI_API_KEY: ✅ SET
   USE_VISUAL_VERSION: v3
   LOG_LEVEL: debug
══════════════════════════════════════════════════════════════════════

🔌 Connecting to Redis...
🎭 Initializing orchestrator...
🧹 Clearing stale job queues on startup...
2025-10-11T19:25:15.753Z [debug] NEW Plan worker created
2025-10-11T19:25:15.754Z [debug] NEW Gen worker created
2025-10-11T19:25:15.754Z [debug] NEW Parallel worker created
✅ Orchestrator initialized

Error: listen EADDRINUSE: address already in use :::8000
    at Server.setupListenHandle [as _listen2] (node:net:1817:16)
    at listenInCluster (node:net:1865:12)
    at Server.listen (node:net:1953:7)
    at main (/home/komail/LEAF/Learn-X/app/backend/src/index.ts:294:10)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ERROR] 00:25:15 Error: listen EADDRINUSE: address already in use :::8000
✅ Redis connected
2025-10-11T19:25:15.766Z [debug] Shutting down server...
2025-10-11T19:25:15.766Z [debug] Server shut down.
[INFO] 00:25:50 Restarting: /home/komail/LEAF/Learn-X/app/backend/src/agents/codegenV3.ts has been modified

══════════════════════════════════════════════════════════════════════
🚀 LEARN-X BACKEND STARTING
══════════════════════════════════════════════════════════════════════
📍 Configuration:
   PORT: 8000
   FRONTEND_URLS: http://localhost:5173, http://localhost:5174
   REDIS_URL: redis://localhost:6379
   GEMINI_API_KEY: ✅ SET
   USE_VISUAL_VERSION: v3
   LOG_LEVEL: debug
══════════════════════════════════════════════════════════════════════

🔌 Connecting to Redis...
🎭 Initializing orchestrator...
🧹 Clearing stale job queues on startup...
2025-10-11T19:25:50.513Z [debug] NEW Plan worker created
2025-10-11T19:25:50.514Z [debug] NEW Gen worker created
2025-10-11T19:25:50.514Z [debug] NEW Parallel worker created
✅ Orchestrator initialized


══════════════════════════════════════════════════════════════════════
✅ SERVER READY
══════════════════════════════════════════════════════════════════════
🌐 Backend URL: http://localhost:8000
🔗 Health Check: http://localhost:8000/health
📡 WebSocket Ready: ws://localhost:8000
══════════════════════════════════════════════════════════════════════

2025-10-11T19:25:50.517Z [debug] Server listening on port 8000
✅ Redis connected
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
[INFO] 00:39:14 Restarting: /home/komail/LEAF/Learn-X/app/backend/src/agents/codegenV3.ts has been modified

══════════════════════════════════════════════════════════════════════
🚀 LEARN-X BACKEND STARTING
══════════════════════════════════════════════════════════════════════
📍 Configuration:
   PORT: 8000
   FRONTEND_URLS: http://localhost:5173, http://localhost:5174
   REDIS_URL: redis://localhost:6379
   GEMINI_API_KEY: ✅ SET
   USE_VISUAL_VERSION: v3
   LOG_LEVEL: debug
══════════════════════════════════════════════════════════════════════

🔌 Connecting to Redis...
🎭 Initializing orchestrator...
🧹 Clearing stale job queues on startup...
2025-10-11T19:39:15.056Z [debug] NEW Plan worker created
2025-10-11T19:39:15.057Z [debug] NEW Gen worker created
2025-10-11T19:39:15.057Z [debug] NEW Parallel worker created
✅ Orchestrator initialized


══════════════════════════════════════════════════════════════════════
✅ SERVER READY
══════════════════════════════════════════════════════════════════════
🌐 Backend URL: http://localhost:8000
🔗 Health Check: http://localhost:8000/health
📡 WebSocket Ready: ws://localhost:8000
══════════════════════════════════════════════════════════════════════

2025-10-11T19:39:15.061Z [debug] Server listening on port 8000
✅ Redis connected
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
[INFO] 00:58:58 Restarting: /home/komail/LEAF/Learn-X/app/backend/src/agents/codegenV3.ts has been modified

══════════════════════════════════════════════════════════════════════
🚀 LEARN-X BACKEND STARTING
══════════════════════════════════════════════════════════════════════
📍 Configuration:
   PORT: 8000
   FRONTEND_URLS: http://localhost:5173, http://localhost:5174
   REDIS_URL: redis://localhost:6379
   GEMINI_API_KEY: ✅ SET
   USE_VISUAL_VERSION: v3
   LOG_LEVEL: debug
══════════════════════════════════════════════════════════════════════

🔌 Connecting to Redis...
🎭 Initializing orchestrator...
🧹 Clearing stale job queues on startup...
2025-10-11T19:58:58.279Z [debug] NEW Plan worker created
2025-10-11T19:58:58.280Z [debug] NEW Gen worker created
2025-10-11T19:58:58.280Z [debug] NEW Parallel worker created
✅ Orchestrator initialized

Error: listen EADDRINUSE: address already in use :::8000
    at Server.setupListenHandle [as _listen2] (node:net:1817:16)
    at listenInCluster (node:net:1865:12)
    at Server.listen (node:net:1953:7)
    at main (/home/komail/LEAF/Learn-X/app/backend/src/index.ts:294:10)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ERROR] 00:58:58 Error: listen EADDRINUSE: address already in use :::8000
✅ Redis connected
2025-10-11T19:58:58.291Z [debug] Shutting down server...
2025-10-11T19:58:58.292Z [debug] Server shut down.
[INFO] 00:59:46 Restarting: /home/komail/LEAF/Learn-X/app/backend/src/agents/codegenV3.ts has been modified

══════════════════════════════════════════════════════════════════════
🚀 LEARN-X BACKEND STARTING
══════════════════════════════════════════════════════════════════════
📍 Configuration:
   PORT: 8000
   FRONTEND_URLS: http://localhost:5173, http://localhost:5174
   REDIS_URL: redis://localhost:6379
   GEMINI_API_KEY: ✅ SET
   USE_VISUAL_VERSION: v3
   LOG_LEVEL: debug
══════════════════════════════════════════════════════════════════════

🔌 Connecting to Redis...
🎭 Initializing orchestrator...
🧹 Clearing stale job queues on startup...
2025-10-11T19:59:46.853Z [debug] NEW Plan worker created
2025-10-11T19:59:46.854Z [debug] NEW Gen worker created
2025-10-11T19:59:46.854Z [debug] NEW Parallel worker created
✅ Orchestrator initialized


══════════════════════════════════════════════════════════════════════
✅ SERVER READY
══════════════════════════════════════════════════════════════════════
🌐 Backend URL: http://localhost:8000
🔗 Health Check: http://localhost:8000/health
📡 WebSocket Ready: ws://localhost:8000
══════════════════════════════════════════════════════════════════════

2025-10-11T19:59:46.857Z [debug] Server listening on port 8000
✅ Redis connected
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
It is highly recommended to use a minimum Redis version of 6.2.0
             Current: 6.0.16
2025-10-11T20:00:46.869Z [debug] [monitor] Metrics updated:
[INFO] 01:00:57 Restarting: /home/komail/LEAF/Learn-X/app/backend/src/agents/codegenV3.ts has been modified
2025-10-11T20:00:57.783Z [debug] Shutting down server...
2025-10-11T20:00:57.783Z [debug] Server shut down.

══════════════════════════════════════════════════════════════════════
🚀 LEARN-X BACKEND STARTING
══════════════════════════════════════════════════════════════════════
📍 Configuration:
   PORT: 8000
   FRONTEND_URLS: http://localhost:5173, http://localhost:5174
   REDIS_URL: redis://localhost:6379
   GEMINI_API_KEY: ✅ SET
   USE_VISUAL_VERSION: v3
   LOG_LEVEL: debug
══════════════════════════════════════════════════════════════════════

🔌 Connecting to Redis...
🎭 Initializing orchestrator...
🧹 Clearing stale job queues on startup...
2025-10-11T20:00:57.964Z [debug] NEW Plan worker created
2025-10-11T20:00:57.964Z [debug] NEW Gen worker created
2025-10-11T20:00:57.965Z [debug] NEW Parallel worker created
✅ Orchestrator initialized

Error: listen EADDRINUSE: address already in use :::8000
    at Server.setupListenHandle [as _listen2] (node:net:1817:16)
    at listenInCluster (node:net:1865:12)
    at Server.listen (node:net:1953:7)
    at main (/home/komail/LEAF/Learn-X/app/backend/src/index.ts:294:10)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ERROR] 01:00:57 Error: listen EADDRINUSE: address already in use :::8000
✅ Redis connected
2025-10-11T20:00:57.976Z [debug] Shutting down server...
2025-10-11T20:00:57.976Z [debug] Server shut down.
